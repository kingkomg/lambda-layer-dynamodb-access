"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.update = exports.query = exports.list = exports.getWhereIdIn = exports.find = exports.insertOrReplace = void 0;
const AWS = __importStar(require("aws-sdk"));
const lodash_1 = __importDefault(require("lodash"));
const DEFAULT_LIMIT = 15;
const isOffline = process.env.IS_OFFLINE;
const isTest = process.env.MOCK_DYNAMODB_ENDPOINT;
const config = Object.assign(Object.assign({ convertEmptyValues: true }, (isTest && {
    endpoint: process.env.MOCK_DYNAMODB_ENDPOINT,
    sslEnabled: false,
    region: "local",
})), (isOffline && {
    region: "localhost",
    endpoint: "http://localhost:15001",
    accessKeyId: "DEFAULT_ACCESS_KEY",
    secretAccessKey: "DEFAULT_SECRET",
}));
console.log("initialize dynamodb with config:", config);
const docClient = new AWS.DynamoDB.DocumentClient(config);
exports.insertOrReplace = (tableName, item) => docClient.put({ TableName: tableName, Item: item }).promise();
exports.find = (tableName, id) => {
    if (id == undefined || id === null) {
        return new Promise((resolve, _) => resolve([]));
    }
    const params = {
        Key: { id },
        TableName: tableName,
    };
    return docClient
        .get(params)
        .promise()
        .then((result) => (lodash_1.default.isEmpty(result) ? null : result.Item));
};
exports.getWhereIdIn = (tableName, ids) => {
    if (ids == undefined || ids.length === 0) {
        return new Promise((resolve, _) => resolve([]));
    }
    const keys = [];
    for (const id of ids) {
        keys.push({ id });
    }
    const params = { RequestItems: { [tableName]: { Keys: keys } } };
    return docClient
        .batchGet(params)
        .promise()
        .then((result) => {
        let items;
        if (result.Responses) {
            items = result.Responses[tableName];
        }
        return lodash_1.default.isEmpty(items) ? [] : items;
    });
};
exports.list = (tableName, limit, nextToken, projectionExpression) => {
    if (!limit) {
        limit = DEFAULT_LIMIT;
    }
    const params = {
        Limit: limit,
        TableName: tableName,
    };
    if (nextToken) {
        params.ExclusiveStartKey = { id: nextToken };
    }
    if (projectionExpression) {
        params.ProjectionExpression = projectionExpression;
    }
    return docClient
        .scan(params)
        .promise()
        .then((result) => ({
        nextToken: result.LastEvaluatedKey ? result.LastEvaluatedKey.id : null,
        items: result.Items,
    }));
};
exports.query = (tableName, indexName, attrName, attrValue) => {
    const params = {
        TableName: tableName,
        IndexName: indexName,
        KeyConditionExpression: `${attrName} = :hkey`,
        ExpressionAttributeValues: { ":hkey": attrValue },
    };
    return docClient
        .query(params)
        .promise()
        .then((result) => result.Items);
};
exports.update = (tableName, id, data) => {
    const updateExpressions = [];
    const expressionsValues = {};
    for (const fieldName of Object.keys(data)) {
        const fieldValue = data[fieldName];
        updateExpressions.push(`${fieldName} = :${fieldName}`);
        const index = `:${fieldName}`;
        expressionsValues[index] = fieldValue;
    }
    const updateExpression = "set " + updateExpressions.join(", ");
    const params = {
        TableName: tableName,
        Key: { id },
        UpdateExpression: updateExpression,
        ExpressionAttributeValues: expressionsValues,
        ReturnValues: "ALL_NEW",
    };
    return docClient
        .update(params)
        .promise()
        .then((result) => (Object.assign({}, result.Attributes)));
};
exports.remove = (tableName, id) => {
    const params = {
        TableName: tableName,
        Key: { id },
    };
    return docClient.delete(params).promise();
};
